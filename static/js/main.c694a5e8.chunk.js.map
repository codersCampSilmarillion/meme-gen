{"version":3,"sources":["components/NavBar/NavBar.js","components/NavBar/index.js","components/randomMeme/styles.js","components/favourities/index.js","components/favourities/Favourites.js","components/ChooseMemeTemplate/styles.js","components/ChooseMemeTemplate/index.js","components/ChooseMemeTemplate/ChooseMemeTemplate.js","components/UploadMemeForm/styles.js","components/UploadMemeForm/Content.js","components/UploadMemeForm/UploadMemeForm.js","components/UploadMemeForm/index.js","views/UploadMeme/index.js","views/UploadMeme/UploadMeme.js","components/randomMeme/scaleImgToAverageSize.js","components/randomMeme/index.js","components/randomMeme/RandomMeme.js","components/randomMeme/ErrorBoundary.js","components/SearchBar.js","components/memeCard.js","components/MemesList.js","views/SearchMemes/index.js","views/SearchMemes/SearchMemes.js","components/App.js","index.js"],"names":["StyledToolbar","styled","Toolbar","display","justifyContent","StyledLinkLight","Link","textDecoration","color","StyledLinkDark","menuItems","menuItemsButtons","map","text","Button","key","to","replace","NavBar","useState","open","setOpen","mediaQuery","useMediaQuery","handleDrawerClose","hamburger","IconButton","edge","aria-label","onClick","AppBar","Typography","variant","Drawer","onClose","List","index","ListItem","button","ListItemIcon","ListItemText","MyButton","background","border","borderRadius","height","padding","margin","MyBox","Box","textAlign","MyHeader","marginTop","marginBottom","Favourites","props","state","randomImg","allMemeImg","alt","localStorage","errorMesssage","fetch","then","data","json","response","memes","setState","allStorage","v","mostCommonInLocalStorage","sort","a","b","filter","length","pop","imgData","find","url","name","catch","err","errorMessage","message","values","keys","Object","i","push","getItem","imgId","this","item","id","includes","src","Container","align","width","Component","useStyles","makeStyles","theme","root","breakpoints","down","flexDirection","alignItems","palette","paper","gridList","flexWrap","transform","maxHeight","titleBar","tile","cursor","selectedImage","maxWidth","selectedTitle","selected","formList","ChooseMemeTemplate","selectedTemplate","setSelectedTemplate","children","templates","setTemplates","classes","tiles","GridListTile","className","image","GridListTileBar","title","useEffect","async","console","error","fetchTemplates","mediaQueryMax550","GridList","cols","spacing","form","input","btn","marginRight","marginLeft","content","link","SimpleDialog","selectedValue","value","loading","setLoading","Dialog","fullWidth","DialogTitle","onLoad","style","href","UploadMemeForm","topText","setTopText","bottomText","setBottomText","memeUrl","setMemeUrl","btnDisable","setBtnDisable","memeData","template_id","text0","text1","username","password","validate","onSubmit","e","preventDefault","obj","entries","join","helpValue","setItem","autoComplete","TextField","label","type","onChange","target","undefined","alert","disabled","UploadMeme","ScaleImgToAverageSize","RandomMeme","randomNumber","Math","floor","random","Grid","container","backgroundColor","ListItemAvatar","Avatar","primary","ErrorBoundary","hasError","React","SearchBar","term","onFormSubmit","noValidate","MemeCard","setSpans","memeRef","current","spans","ceil","createRef","addEventListener","log","meme","gridRowEnd","ref","images","downsized","MemesList","SearchMemes","setMemes","axios","get","params","api_key","q","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c694a5e8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Button,\r\n  Typography,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StyledToolbar = styled(Toolbar)({\r\n  display: \"flex\",\r\n  justifyContent: \"space-between\"\r\n});\r\n\r\nconst StyledLinkLight = styled(Link)({\r\n  textDecoration: \"none\",\r\n  color: \"#ffffff\"\r\n});\r\n\r\nconst StyledLinkDark = styled(Link)({\r\n  textDecoration: \"none\",\r\n  color: \"rgba(0, 0, 0, 0.87)\"\r\n});\r\n\r\nconst menuItems = [\"Search Memes\", \"Upload Meme\", \"Favourites\"];\r\n\r\nconst menuItemsButtons = menuItems.map(text => {\r\n  return (\r\n    <Button key={text}>\r\n      <StyledLinkLight to={`/${text.replace(/ +/g, \"\")}`}>\r\n        {text}\r\n      </StyledLinkLight>\r\n    </Button>\r\n  );\r\n});\r\n\r\nconst NavBar = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const mediaQuery = useMediaQuery(\"(max-width:550px)\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const hamburger = (\r\n    <IconButton\r\n      edge=\"end\"\r\n      color=\"inherit\"\r\n      aria-label=\"menu\"\r\n      onClick={handleDrawerOpen}\r\n    >\r\n      <MenuIcon />\r\n    </IconButton>\r\n  );\r\n\r\n  return (\r\n    <AppBar>\r\n      <StyledToolbar>\r\n        <Typography variant=\"h6\">\r\n          <StyledLinkLight to=\"/\">Meme-Gen</StyledLinkLight>\r\n        </Typography>\r\n        {mediaQuery ? hamburger : <div>{menuItemsButtons}</div>}\r\n        <Drawer open={open} onClose={handleDrawerClose}>\r\n          <List>\r\n            {menuItems.map((text, index) => (\r\n              <ListItem button key={text}>\r\n                <ListItemIcon>\r\n                  {text === \"Search Memes\" ? (\r\n                    <SearchIcon />\r\n                  ) : text === \"Upload Meme\" ? (\r\n                    <CloudUploadIcon />\r\n                  ) : (\r\n                    <FavoriteIcon />\r\n                  )}\r\n                </ListItemIcon>\r\n                <ListItemText>\r\n                  <StyledLinkDark\r\n                    to={`/${text.replace(/ +/g, \"\")}`}\r\n                    onClick={handleDrawerClose}\r\n                  >\r\n                    {text}\r\n                  </StyledLinkDark>\r\n                </ListItemText>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n      </StyledToolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import NavBar from \"./NavBar\";\r\nexport default NavBar;\r\n","import { styled } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nconst MyButton = styled(Button)({\r\n    background: 'linear-gradient(30deg, #bdc3c7 30%, #2c3e50 80%)',\r\n    border: 0,\r\n    borderRadius: 3,\r\n    color: 'white',\r\n    height: 48,\r\n    padding: '4%',\r\n    margin: '4%',\r\n});\r\n\r\nconst MyBox = styled(Box)({\r\n    display:\"inline\",\r\n    margin: 2,\r\n    padding: 2,\r\n    textAlign: \"right\"\r\n});\r\n\r\nconst MyHeader = styled(Box)({\r\n    marginTop: \"8%\",\r\n    marginBottom: \"2%\",\r\n    textAlign: \"center\"\r\n});\r\n\r\n\r\nexport {MyBox, MyButton, MyHeader};\r\n\r\n\r\n","import Favourites from \"./Favourites\";\r\n\r\nexport default Favourites;","import React, {Component} from \"react\";\r\nimport {Container, Typography} from \"@material-ui/core\";\r\nimport {MyButton, MyBox, MyHeader} from \"../randomMeme/styles\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Favourites extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomImg: [],\r\n            allMemeImg: [],\r\n            alt: \"\",\r\n            localStorage: [],\r\n            errorMesssage: \"\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(data => data.json())\r\n            .then(response => {\r\n                const {memes} = response.data;\r\n                this.setState({allMemeImg: memes, localStorage: this.allStorage()});\r\n                let v = this.allStorage();\r\n                let mostCommonInLocalStorage = v.sort((a, b) =>\r\n                    v.filter(v => v === a).length\r\n                    - v.filter(v => v === b).length\r\n                ).pop();\r\n                let imgData = this.find(mostCommonInLocalStorage);\r\n                this.setState({randomImg: imgData.url, alt: imgData.name})\r\n            })\r\n            .catch(err => {\r\n                this.setState({errorMessage: err.message});\r\n            });\r\n    }\r\n\r\n    allStorage() {\r\n        var values = [],\r\n            keys = Object.keys(localStorage),\r\n            i = keys.length;\r\n\r\n        while (i--) {\r\n            values.push(localStorage.getItem(keys[i]));\r\n        }\r\n        return values\r\n    }\r\n\r\n    find(imgId) {\r\n        var found = this.state.allMemeImg.filter(item => item.id.includes(imgId));\r\n        return found.find(item => item.url)\r\n    }\r\n\r\n    render() {\r\n        if (localStorage.length == 0) {\r\n            return (\r\n                <MyHeader>\r\n                    <Typography variant={\"h3\"}>You do not have favourite meme yet</Typography>\r\n                    <Link to={\"/UploadMeme\"}>\r\n                        <MyButton>Start make a meme</MyButton>\r\n                    </Link>\r\n                </MyHeader>)\r\n        } else if (this.state.errorMessage) {\r\n            return (<div>\r\n                <h1>Server is not available.<p>Try again later</p><img\r\n                    src={\"http://www.samsungsfour.com/images/exclamation.png\"} alt={\"Error img\"}/></h1>\r\n            </div>)\r\n        }\r\n        return (\r\n            <Container align={\"center\"}>\r\n                <MyHeader>\r\n                    <Typography variant={\"h2\"}>\r\n                        Your favorite meme\r\n                    </Typography>\r\n                </MyHeader>\r\n                <img src={this.state.randomImg} width={400} alt={this.state.alt}/>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Favourites;\r\n\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    marginTop: \"80px\",\r\n    [theme.breakpoints.down(700)]: {\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\"\r\n    },\r\n    justifyContent: \"space-around\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"1px solid rgba(0, 0, 0, 0.12)\",\r\n    padding: \"10px\"\r\n  },\r\n  gridList: {\r\n    flexWrap: \"nowrap\",\r\n    transform: \"translateZ(0)\",\r\n    maxHeight: \"200px\"\r\n  },\r\n  titleBar: {\r\n    background:\r\n      \"linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\"\r\n  },\r\n  tile: {\r\n    cursor: \"pointer\"\r\n  },\r\n  selectedImage: {\r\n    marginBottom: \"30px\",\r\n    maxWidth: \"80%\",\r\n    [theme.breakpoints.down(400)]: { maxWidth: \"270px\" },\r\n    border: \"1px solid rgba(0, 0, 0, 0.12)\"\r\n  },\r\n  selectedTitle: {\r\n    padding: \"10px\"\r\n  },\r\n  selected: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    padding: \"10px\",\r\n    width: \"50%\",\r\n    [theme.breakpoints.down(700)]: { width: \"80%\" }\r\n  },\r\n  formList: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"50%\",\r\n    [theme.breakpoints.down(700)]: { width: \"100%\" }\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import ChooseMemeTemplate from \"./ChooseMemeTemplate\";\r\nexport default ChooseMemeTemplate;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  GridList,\r\n  Container,\r\n  Typography,\r\n  useMediaQuery,\r\n  GridListTile,\r\n  GridListTileBar\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"./styles\";\r\n\r\nconst ChooseMemeTemplate = ({\r\n  selectedTemplate,\r\n  setSelectedTemplate,\r\n  children\r\n}) => {\r\n  const [templates, setTemplates] = useState([]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const tiles = templates.map(tile => {\r\n    return (\r\n      <GridListTile\r\n        key={tile.id}\r\n        className={classes.tile}\r\n        onClick={() => setSelectedTemplate(tile)}\r\n      >\r\n        <img className={classes.image} src={tile.url} alt={tile.name} />\r\n        <GridListTileBar title={tile.name} className={classes.titleBar} />\r\n      </GridListTile>\r\n    );\r\n  });\r\n\r\n  const fetchTemplates = async () => {\r\n    const url = \"https://api.imgflip.com/get_memes\";\r\n    try {\r\n      const response = await fetch(url);\r\n      const json = await response.json();\r\n      setTemplates(json.data.memes);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTemplates();\r\n  }, []);\r\n\r\n  const mediaQueryMax550 = useMediaQuery(\"(max-width: 550px)\");\r\n\r\n  const imagesInList = () => {\r\n    if (mediaQueryMax550) return 2;\r\n    return 3;\r\n  };\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <div className={classes.root}>\r\n        <div className={classes.formList}>\r\n          <GridList className={classes.gridList} cols={imagesInList()}>\r\n            {tiles}\r\n          </GridList>\r\n          {children}\r\n        </div>\r\n        <div className={classes.selected}>\r\n          <Typography variant=\"h6\" className={classes.selectedTitle}>\r\n            {selectedTemplate.name}\r\n          </Typography>\r\n          <img\r\n            className={classes.selectedImage}\r\n            alt={selectedTemplate.name}\r\n            src={selectedTemplate.url}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChooseMemeTemplate;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1)\r\n    }\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  input: {\r\n    margin: \"5px\"\r\n  },\r\n  btn: {\r\n    width: \"200px\",\r\n    marginRight: \"auto\",\r\n    marginLeft: \"auto\"\r\n  },\r\n  content: {\r\n    textAlign: \"center\"\r\n  },\r\n\r\n  link: {\r\n    textDecoration: \"underline\"\r\n  },\r\n  image: {\r\n    maxHeight: \"60vh\"\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import React, { useState } from \"react\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport useStyles from \"./styles\";\r\n\r\nexport default function SimpleDialog({ onClose, selectedValue, open, value }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const classes = useStyles();\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={open} maxWidth=\"lg\" fullWidth={true}>\r\n      <DialogTitle>Your meme</DialogTitle>\r\n      <div className={classes.content}>\r\n        {loading ? <Typography variant=\"h6\">Loading...</Typography> : null}\r\n        <img\r\n          src={value}\r\n          alt=\"your meme\"\r\n          className={classes.image}\r\n          onLoad={() => setLoading(false)}\r\n          style={loading ? { display: \"none\" } : {}}\r\n        />\r\n        <p>\r\n          <Button variant=\"contained\" color=\"primary\" href={value}>\r\n            Share Your meme\r\n          </Button>\r\n        </p>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Content from \"./Content.js\";\r\nimport useStyles from \"./styles\";\r\n\r\nconst objToQuery = obj => {\r\n    const data = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\r\n    return \"?\" + data.join(\"&\");\r\n};\r\n\r\nfunction UploadMemeForm({selectedTemplate}) {\r\n    const [topText, setTopText] = useState(\"\");\r\n    const [bottomText, setBottomText] = useState(\"\");\r\n    const [open, setOpen] = useState(false);\r\n    const [memeUrl, setMemeUrl] = useState();\r\n    const [btnDisable, setBtnDisable] = useState(true);\r\n    const classes = useStyles();\r\n\r\n    const memeData = {\r\n        template_id: selectedTemplate,\r\n        text0: topText,\r\n        text1: bottomText,\r\n        username: \"silmarillion\",\r\n        password: \"1silmarillion23\"\r\n    };\r\n    const handleClickOpen = () => {\r\n        if (selectedTemplate === undefined) {\r\n            alert(\"Select a template!\");\r\n        } else {\r\n            setOpen(true);\r\n        }\r\n    };\r\n    const handleClose = value => {\r\n        setOpen(false);\r\n        setMemeUrl();\r\n    };\r\n\r\n    const validate = (topText, bottomText) => {\r\n        if (topText.length === 0 && bottomText.length === 0) {\r\n            setBtnDisable(true);\r\n        } else setBtnDisable(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        validate(topText, bottomText);\r\n    }, [topText, bottomText]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form\r\n                className={classes.form}\r\n                onSubmit={async e => {\r\n                    e.preventDefault();\r\n                    try {\r\n                        const response = await fetch(\r\n                            `https://api.imgflip.com/caption_image${objToQuery(memeData)}`\r\n                        );\r\n                        const json = await response.json();\r\n                        setMemeUrl(json.data.url);\r\n                        let helpValue = localStorage.getItem('number');\r\n                        localStorage.setItem(helpValue, selectedTemplate);\r\n                        localStorage.setItem('number', helpValue + 1)\r\n\r\n                    } catch (error) {\r\n                        console.error(error);\r\n                    }\r\n                }}\r\n\r\n                autoComplete=\"off\"\r\n            >\r\n                <TextField\r\n                    label=\"Top text\"\r\n                    variant=\"outlined\"\r\n                    type=\"text\"\r\n                    name=\"topText\"\r\n                    onChange={e => {\r\n                        setTopText(e.target.value);\r\n                    }}\r\n                    className={classes.input}\r\n                />\r\n                <TextField\r\n                    label=\"Bottom text\"\r\n                    variant=\"outlined\"\r\n                    type=\"text\"\r\n                    name=\"bottomText\"\r\n                    onChange={e => {\r\n                        setBottomText(e.target.value);\r\n                    }}\r\n                    className={classes.input}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    onClick={handleClickOpen}\r\n                    className={classes.btn}\r\n                    disabled={btnDisable}\r\n                >\r\n                    Generate meme\r\n                </Button>\r\n                <Content open={open} onClose={handleClose} value={memeUrl}/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadMemeForm;\r\n","import UploadMemeForm from \"./UploadMemeForm\";\r\nexport default UploadMemeForm;\r\n","import UploadMeme from \"./UploadMeme\";\r\nexport default UploadMeme;\r\n","import React, { useState } from \"react\";\r\nimport ChooseMemeTemplate from \"../../components/ChooseMemeTemplate\";\r\nimport UploadMemeForm from \"../../components/UploadMemeForm\";\r\n\r\nconst UploadMeme = () => {\r\n  const [selectedTemplate, setSelectedTemplate] = useState([]);\r\n  return (\r\n    <>\r\n      <ChooseMemeTemplate\r\n        setSelectedTemplate={setSelectedTemplate}\r\n        selectedTemplate={selectedTemplate}\r\n      >\r\n        <UploadMemeForm selectedTemplate={selectedTemplate.id} />\r\n      </ChooseMemeTemplate>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadMeme;\r\n","let ScaleImgToAverageSize;\r\n\r\nScaleImgToAverageSize = (width, height) =>\r\n    height <= 1500 && width <= 1500 ?\r\n        height > 1000 || width > 1000 ?\r\n            0.4 : height > 560 && height < 1000 || width > 560 && width < 1000 ? 0.6 : 0.8 : 0.2;\r\n\r\nexport default ScaleImgToAverageSize;","import RandomMeme from \"./RandomMeme\";\r\n\r\nexport default RandomMeme;","import React, {Component} from \"react\";\r\nimport {\r\n    ListItemText, Grid, Container, ListItemAvatar, Avatar, ListItem, Typography\r\n\r\n} from \"@material-ui/core\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport ScaleImgToAverageSize from \"./scaleImgToAverageSize\";\r\nimport {MyButton, MyBox, MyHeader} from \"./styles\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass RandomMeme extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            randomImg: \"\",\r\n            allMemeImg: [],\r\n            alt: \"\",\r\n            width: \"\",\r\n            height: \"\",\r\n            errorMesssage: \"\"\r\n        };\r\n    }\r\n\r\n    random() {\r\n        let randomNumber = Math.floor(\r\n            Math.random() * this.state.allMemeImg.length\r\n        );\r\n        const {url, name, width, height} = this.state.allMemeImg[randomNumber];\r\n        this.setState({\r\n            randomImg: url, alt: name, width: width, height: height\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(data => data.json())\r\n            .then(response => {\r\n                const {memes} = response.data;\r\n                this.setState({allMemeImg: memes});\r\n                this.random();\r\n            })\r\n            .catch(err => {\r\n                this.setState({errorMessage: err.message});\r\n            });\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.errorMessage) {\r\n            return (<div><MyHeader>Server is not available.<p>Try again later</p><img\r\n                src={\"http://www.samsungsfour.com/images/exclamation.png\"} alt={\"Error img\"}/></MyHeader></div>)\r\n        }\r\n        return (\r\n            <Container>\r\n                <MyHeader>\r\n                    <Typography variant=\"h2\">\r\n                        Make your own amazing meme!\r\n                    </Typography>\r\n                    <Typography variant={\"h6\"}>\r\n                        Create your meme easy\r\n                    </Typography>\r\n                </MyHeader>\r\n                <Grid container spacing={1} style={{backgroundColor: \" rgb(245,245,240)\"}}>\r\n                    <MyBox>\r\n                        <img src={this.state.randomImg}\r\n                             alt={this.state.alt}\r\n                             width={this.state.width * ScaleImgToAverageSize(this.state.width, this.state.height)}\r\n                             height={this.state.height * ScaleImgToAverageSize(this.state.width, this.state.height)}\r\n                        />\r\n                    </MyBox>\r\n                    <MyBox>\r\n                        <Typography variant=\"h4\">\r\n                            <br/>How to make a meme:\r\n                    </Typography>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <StarIcon/>\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary=\"Choose you meme template\"/>\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <StarIcon/>\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary=\"Write your unique text\"/>\r\n                        </ListItem>\r\n                        <ListItem>\r\n                            <ListItemAvatar>\r\n                                <Avatar>\r\n                                    <StarIcon/>\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary=\"Voila! You have just created a meme\"/>\r\n                        </ListItem>\r\n                        <Link to={\"/UploadMeme\"}>\r\n                            <MyButton>Start make a meme</MyButton>\r\n                        </Link>\r\n                    </MyBox>\r\n                </Grid>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandomMeme;\r\n\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: \"\", errorMessage: \"\" };\r\n    }\r\n\r\n    componentDidCatch(hasError, errorMessage) {\r\n        this.setState({ hasError: hasError, errorMessage: errorMessage });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.errorMessage) {\r\n            return (<h1>Something went wrong.</h1>);\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./css/app.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { term: \"\" };\r\n\r\n  onFormSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.term);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          onSubmit={this.onFormSubmit}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          className=\"search\"\r\n        >\r\n          <TextField\r\n            label=\"GIF Name\"\r\n            variant=\"outlined\"\r\n            type=\"text\"\r\n            value={this.state.term}\r\n            onChange={e => this.setState({ term: e.target.value })}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nclass MemeCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { spans: 0 };\r\n    this.memeRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.memeRef.current.addEventListener(\"load\", this.setSpans);\r\n    console.log(this.props.meme);\r\n  }\r\n\r\n  setSpans = () => {\r\n    const height = this.memeRef.current.height;\r\n\r\n    const spans = Math.ceil(height / 10);\r\n\r\n    this.setState({ spans: spans });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\r\n        <img\r\n          ref={this.memeRef}\r\n          src={this.props.meme.images.downsized.url}\r\n          alt={this.props.meme.title}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeCard;\r\n","import React from 'react';\r\nimport './css/app.css';\r\nimport MemeCard from './memeCard'\r\n\r\nconst MemesList = (props) => {\r\n    const memes = props.memes.map((meme) => {\r\n        return <MemeCard meme = {meme} key = {meme.id} />\r\n    })\r\n\r\n    return ( \r\n        <div className=\"mem-list\" >\r\n            { memes } \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MemesList","import SearchMemes from \"./SearchMemes\";\r\nexport default SearchMemes;\r\n","import React, { useState } from \"react\";\r\nimport SearchBar from \"../../components/SearchBar\";\r\nimport MemesList from \"../../components/MemesList\";\r\nimport axios from \"axios\";\r\nimport \"../../components/css/app.css\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst SearchMemes = () => {\r\n  const [memes, setMemes] = useState([]);\r\n\r\n  const onSearchSubmit = async term => {\r\n    try {\r\n      const response = await axios.get(\"http://api.giphy.com/v1/gifs/search\", {\r\n        params: {\r\n          api_key: \"9zdu5qM9hpvnV2VpvxbWEsBUt5bIxQJg\",\r\n          q: term\r\n        }\r\n      });\r\n      setMemes(response.data.data);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"header\">\r\n        <Typography variant=\"h1\">GIF SEARCHER</Typography>\r\n        <Typography variant=\"h4\">\r\n          Insert a phrase, press Enter and search for your favorite GIF!\r\n        </Typography>\r\n        <SearchBar onSubmit={onSearchSubmit} />\r\n      </div>\r\n      <MemesList memes={memes} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchMemes;\r\n","import React from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\nimport Favourites from \"./favourities\";\r\nimport UploadMeme from \"../views/UploadMeme\";\r\nimport RandomMeme from \"./randomMeme\";\r\nimport ErrorBoundary from \"./randomMeme/ErrorBoundary\";\r\nimport \"./css/app.css\";\r\nimport SearchMemes from \"../views/SearchMemes\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Router>\r\n            <NavBar/>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <ErrorBoundary>\r\n                        <RandomMeme/>\r\n                    </ErrorBoundary>\r\n                </Route>\r\n                <Route exact path=\"/SearchMemes\"><SearchMemes/></Route>\r\n                <Route exact path=\"/UploadMeme\">\r\n                    <UploadMeme/>\r\n                </Route>\r\n                <Route exact path=\"/Favourites\">\r\n                    <Favourites/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\")); \r\n"],"sourceRoot":""}